"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Identicon = void 0;

var _vue = _interopRequireDefault(require("vue"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _icons = require("./icons");

// Copyright 2017-2022 @polkadot/vue-identicon authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_SIZE = 64;

function encodeAccount(value, prefix) {
  try {
    const address = (0, _util.isU8a)(value) || (0, _util.isHex)(value) ? (0, _utilCrypto.encodeAddress)(value, prefix) : value;
    const publicKey = (0, _util.u8aToHex)((0, _utilCrypto.decodeAddress)(address, false, prefix));
    return {
      address,
      publicKey
    };
  } catch (error) {
    return {
      address: '',
      publicKey: '0x'
    };
  }
}
/**
 * @name Identicon
 * @description The main Identicon component, taking a number of properties
 * @example
 * ```html
 * <Identicon :size="128" :theme="polkadot" :value="..." />
 * ```
 */


const Identicon = _vue.default.extend({
  components: {
    Beachball: _icons.Beachball,
    Empty: _icons.Empty,
    Jdenticon: _icons.Jdenticon,
    Polkadot: _icons.Polkadot
  },
  created: function () {
    this.createData();
  },
  data: function () {
    return {
      address: '',
      iconSize: DEFAULT_SIZE,
      isAlternativeIcon: false,
      publicKey: '0x',
      type: 'empty'
    };
  },
  methods: {
    createData: function () {
      this.iconSize = this.size || DEFAULT_SIZE;
      this.type = this.theme;
      this.isAlternativeIcon = this.isAlternative || false;
      this.recodeAddress();
    },
    recodeAddress: function () {
      const {
        address,
        publicKey
      } = encodeAccount(this.value);
      this.address = address;
      this.publicKey = publicKey;
    }
  },
  props: ['prefix', 'isAlternative', 'size', 'theme', 'value'],

  render(h) {
    const {
      address,
      iconSize,
      isAlternativeIcon,
      publicKey,
      type
    } = this.$data;

    if (type === 'empty') {
      return h('Empty', {
        attrs: {
          key: address,
          size: iconSize
        }
      }, []);
    } else if (type === 'jdenticon') {
      return h('Jdenticon', {
        attrs: {
          key: address,
          publicKey,
          size: iconSize
        }
      }, []);
    } else {
      // handles: beachball and polkadot
      // TODO: substrate
      const cmp = type.charAt(0).toUpperCase() + type.slice(1);
      return h(cmp, {
        attrs: {
          address,
          isAlternative: isAlternativeIcon,
          key: address,
          size: iconSize
        }
      }, []);
    }
  },

  watch: {
    value: function () {
      this.recodeAddress();
    }
  }
});

exports.Identicon = Identicon;